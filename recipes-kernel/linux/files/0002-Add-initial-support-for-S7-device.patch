From 0389fe5398cfb650bd4aa9248e69617bf0f186f7 Mon Sep 17 00:00:00 2001
From: Robert Lehmann <robert.lehmann@sitec-systems.de>
Date: Tue, 18 Jul 2017 16:10:21 +0200
Subject: [PATCH 2/2] Add initial support for S7 device

The following devices will be supported by the kernel:

* UARTs
* USB
* I2C expanders
* SPI devices
* Ethernet
* CAN
* MMC interfaces

Ticket #1958
---
 arch/arm/boot/dts/Makefile            |   1 +
 arch/arm/boot/dts/am335x-s7-base.dtsi | 666 ++++++++++++++++++++++++++++++++++
 arch/arm/boot/dts/am335x-s7.dts       | 113 ++++++
 drivers/misc/Kconfig                  |   9 +-
 drivers/misc/Makefile                 |   1 +
 drivers/misc/gpio-export.c            | 118 ++++++
 scripts/genmergeimage.bash            |   2 +-
 7 files changed, 907 insertions(+), 3 deletions(-)
 create mode 100644 arch/arm/boot/dts/am335x-s7-base.dtsi
 create mode 100644 arch/arm/boot/dts/am335x-s7.dts
 create mode 100644 drivers/misc/gpio-export.c

diff --git a/arch/arm/boot/dts/Makefile b/arch/arm/boot/dts/Makefile
index 02fd760..5590bc5 100644
--- a/arch/arm/boot/dts/Makefile
+++ b/arch/arm/boot/dts/Makefile
@@ -472,6 +472,7 @@ dtb-$(CONFIG_SOC_AM33XX) += \
 	am335x-phycore-eeprom-rtc-spi-tmp.dtb \
 	am335x-phycore-eeprom.dtb \
 	am335x-phycore-none.dtb \
+	am335x-s7.dtb \
 	am335x-lxm.dtb \
 	am335x-chiliboard.dtb \
 	am335x-wega-rdk.dtb \
diff --git a/arch/arm/boot/dts/am335x-s7-base.dtsi b/arch/arm/boot/dts/am335x-s7-base.dtsi
new file mode 100644
index 0000000..ff0c2bd
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-s7-base.dtsi
@@ -0,0 +1,666 @@
+/*
+ * Copyright (C) 2017 sitec systems GmbH
+ * Author: Robert Lehmann <robert.lehmann@sitec-systems.de>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include "am33xx.dtsi"
+#include <dt-bindings/interrupt-controller/irq.h>
+
+/ {
+	model = "Phytec AM335x phyCORE";
+	compatible = "phytec,am335x-phycore-som", "ti,am33xx";
+
+	memory {
+		device_type = "memory";
+		reg = <0x80000000 0x20000000>;
+  };
+
+	aliases {
+		rtc0 = &i2c_rtc;
+		rtc1 = &rtc;
+	};
+
+  chosen {
+    stdout-path = &uart0;
+  };
+
+	cpus {
+		cpu@0 {
+			cpu0-supply = <&vdd1_reg>;
+		};
+	};
+
+	regulators {
+		compatible = "simple-bus";
+
+		vcc5v: fixedregulator@0 {
+			compatible = "regulator-fixed";
+			regulator-name = "vcc5v";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			regulator-boot-on;
+			regulator-always-on;
+		};
+
+		vcc3v3: fixedregulator@1 {
+			compatible = "regulator-fixed";
+			regulator-name = "vcc3v3";
+			regulator-min-microvolt = <3300000>;
+			regulator-max-microvolt = <3300000>;
+			regulator-boot-on;
+		};
+
+		vcc1v8: fixedregulator@2 {
+			compatible = "regulator-fixed";
+			regulator-name = "vcc1v8";
+			regulator-min-microvolt = <1800000>;
+			regulator-max-microvolt = <1800000>;
+			regulator-boot-on;
+		};
+	};
+
+  eth1: gpio_exp@0 {
+    compatible = "gpio-export";
+    pinctrl-names = "default";
+    pinctrl-0 = <&eth1_en>;
+    en-gpio = <&gpio3 18 0>;
+    en-name = "eth1en";
+    en-output-high;
+  };
+  
+  wifi: gpio_exp@1 {
+    compatible = "gpio-export";
+    pinctrl-names = "default";
+    pinctrl-0 = <&wifi_en>;
+    en-gpio = <&gpio3 19 0>;
+    en-name = "wifi_en";
+    en-output-high;
+  };
+
+  gnss: gpio_exp@2 {
+    compatible = "gpio-export";
+    pinctrl-names = "default";
+    pinctrl-0 = <&gnss_en>;
+    en-gpio = <&gpio2 7 0>;
+    en-name = "gnss_en";
+    en-output-high;
+    en-do-export;
+  };
+
+  gsmign: gpio_exp@3 {
+    compatible = "gpio-export";
+    pinctrl-names = "default";
+    pinctrl-0 = <&gsm_ign>;
+    en-gpio = <&gpio2 23 0>;
+    en-name = "gsm_ign";
+    en-output-low;
+    en-do-export;
+  };
+
+  gsmen: gpio_exp@4 {
+    compatible = "gpio-export";
+    pinctrl-names = "default";
+    pinctrl-0 = <&gsm_en>;
+    en-gpio = <&gpio2 24 0>;
+    en-name = "gsm_en";
+    en-output-high;
+    en-do-export;
+  };
+
+  gsmeoff: gpio_exp@5 {
+    compatible = "gpio-export";
+    pinctrl-names = "default";
+    pinctrl-0 = <&gsm_e_off>;
+    en-gpio = <&gpio2 25 0>;
+    en-name = "gsm_e_off";
+    en-output-low;
+    en-do-export;
+  };
+
+  huben: gpio_exp@6 {
+    compatible = "gpio-export";
+    pinctrl-names = "default";
+    pinctrl-0 = <&hub>;
+    en-gpio = <&gpio3 20 0>;
+    en-name = "hub_en";
+    en-output-high;
+  };
+  
+  gpio_exp@7 {
+    compatible = "gpio-export";
+    pinctrl-names = "default";
+    pinctrl-0 = <&k15>;
+    en-gpio = <&gpio0 31 0>;
+    en-name = "di_k15";
+  };
+};
+
+&am33xx_pinmux {
+  eth1_en: pinmux_eth1_en {
+    pinctrl-single,pins = <
+      0x1a0 ( PIN_OUTPUT_PULLUP | MUX_MODE7 ) /* (B12) mcasp0_aclkr.gpio3[18] */
+    >;
+  };
+  wifi_en: pinmux_wifi_en {
+    pinctrl-single,pins = <
+      0x1a4 ( PIN_OUTPUT_PULLUP | MUX_MODE7 ) /* mcasp0_fsr.gpio3[19] */
+    >;
+  };
+  gnss_en: pinmux_gnss_en {
+    pinctrl-single,pins = <
+      0xa4 ( PIN_OUTPUT_PULLUP | MUX_MODE7 ) /* (R2) lcd_data1.gpio2[7] */
+    >;
+  };
+  gsm_ign: pinmux_gsm_ign {
+    pinctrl-single,pins = <
+      0xe4 ( PIN_OUTPUT_PULLUP | MUX_MODE7 ) /* (R5) lcd_hsync.gpio2[23] */
+    >;
+  };
+  gsm_en: pinmux_gsm_en {
+    pinctrl-single,pins = <
+      0xe8 ( PIN_OUTPUT_PULLUP | MUX_MODE7 ) /* (V5) lcd_pclk.gpio2[24] */
+    >;
+  };
+
+  gsm_e_off: pinmux_gsm_e_off {
+    pinctrl-single,pins = <
+      0xec ( PIN_OUTPUT_PULLUP | MUX_MODE7 ) /* (R6) lcd_ac_bias_en.gpio2[25] */
+    >;
+  };
+
+  hub: pinmux_hub_en {
+    pinctrl-single,pins = <
+      0x1a8 ( PIN_OUTPUT_PULLUP | MUX_MODE7 ) /* (D13) mcasp0_axr1.gpio3[20] */
+    >;
+  };
+
+  k15: pinmux_k15 {
+    pinctrl-single,pins = <
+      0x74 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* (U17) gpmc_wpn.gpio0[31] */
+    >;
+  };
+};
+
+/* Crypto Module */
+&aes {
+	status = "okay";
+};
+
+&sham {
+	status = "okay";
+};
+
+/* Ethernet */
+&am33xx_pinmux {
+	ethernet0_pins: pinmux_ethernet0 {
+		pinctrl-single,pins = <
+			0x10c (PIN_INPUT_PULLDOWN | MUX_MODE1)	/* mii1_crs.rmii1_crs_dv */
+			0x110 (PIN_INPUT_PULLDOWN | MUX_MODE1)	/* mii1_rxerr.rmii1_rxerr */
+			0x114 (PIN_OUTPUT | MUX_MODE1)		/* mii1_txen.rmii1_txen */
+			0x124 (PIN_OUTPUT | MUX_MODE1)		/* mii1_txd1.rmii1_txd1 */
+			0x128 (PIN_OUTPUT | MUX_MODE1)		/* mii1_txd0.rmii1_txd0 */
+			0x13c (PIN_INPUT_PULLDOWN | MUX_MODE1)	/* mii1_rxd1.rmii1_rxd1 */
+			0x140 (PIN_INPUT_PULLDOWN | MUX_MODE1)	/* mii1_rxd0.rmii1_rxd0 */
+			0x144 (PIN_INPUT_PULLDOWN | MUX_MODE0)	/* rmii1_refclk.rmii1_refclk */
+		>;
+	};
+
+	mdio_pins: pinmux_mdio {
+		pinctrl-single,pins = <
+			/* MDIO */
+			0x148 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE0)	/* mdio_data.mdio_data */
+			0x14c (PIN_OUTPUT_PULLUP | MUX_MODE0)			/* mdio_clk.mdio_clk */
+		>;
+	};
+};
+
+&am33xx_pinmux {
+  ethernet1_pins: pinmux_ethernet1 {
+    pinctrl-single,pins = <
+      0x40 ( PIN_OUTPUT_PULLDOWN | MUX_MODE2 ) /* (R13) gpmc_a0.rgmii2_tctl */
+      0x44 ( PIN_INPUT_PULLDOWN | MUX_MODE2 ) /* (V14) gpmc_a1.rgmii2_rctl */
+      0x58 ( PIN_OUTPUT_PULLDOWN | MUX_MODE2 ) /* (U15) gpmc_a6.rgmii2_tclk */
+      0x5c ( PIN_INPUT_PULLDOWN | MUX_MODE2 ) /* (T15) gpmc_a7.rgmii2_rclk */
+      0x54 ( PIN_OUTPUT_PULLDOWN | MUX_MODE2 ) /* (V15) gpmc_a5.rgmii2_td0 */
+      0x50 ( PIN_OUTPUT_PULLDOWN | MUX_MODE2 ) /* (R14) gpmc_a4.rgmii2_td1 */
+      0x4c ( PIN_OUTPUT_PULLDOWN | MUX_MODE2 ) /* (T14) gpmc_a3.rgmii2_td2 */
+      0x48 ( PIN_OUTPUT_PULLDOWN | MUX_MODE2 ) /* (U14) gpmc_a2.rgmii2_td3 */
+      0x6c ( PIN_INPUT_PULLDOWN | MUX_MODE2 ) /* (V17) gpmc_a11.rgmii2_rd0 */
+      0x68 ( PIN_INPUT_PULLDOWN | MUX_MODE2 ) /* (T16) gpmc_a10.rgmii2_rd1 */
+      0x64 ( PIN_INPUT_PULLDOWN | MUX_MODE2 ) /* (U16) gpmc_a9.rgmii2_rd2 */
+      0x60 ( PIN_INPUT_PULLDOWN | MUX_MODE2 ) /* (V16) gpmc_a8.rgmii2_rd3 */
+    >;
+  };
+};
+
+&cpsw_emac0 {
+	phy_id = <&davinci_mdio>, <0>;
+	phy-mode = "rmii";
+	dual_emac_res_vlan = <1>;
+};
+
+&davinci_mdio {
+	pinctrl-names = "default";
+	pinctrl-0 = <&mdio_pins>;
+	status = "okay";
+};
+
+&cpsw_emac1 {
+	phy_id = <&davinci_mdio>, <2>;
+	phy-mode = "rgmii";
+  status = "okay";
+};
+
+&mac {
+	slaves = <2>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&ethernet0_pins &ethernet1_pins>;
+	dual_emac;
+  status = "okay";
+};
+
+&phy_sel {
+	rmii-clock-ext;
+};
+
+/* I2C Busses */
+&am33xx_pinmux {
+	i2c0_pins: pinmux_i2c0 {
+		pinctrl-single,pins = <
+			0x188 (PIN_INPUT | MUX_MODE0)	/* i2c0_sda.i2c0_sda */
+			0x18c (PIN_INPUT | MUX_MODE0)	/* i2c0_scl.i2c0_scl */
+		>;
+	};
+};
+
+&i2c0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&i2c0_pins>;
+	clock-frequency = <400000>;
+	status = "okay";
+
+	tps: pmic@2d {
+		reg = <0x2d>;
+	};
+
+	i2c_rtc: rtc@68 {
+		compatible = "m41t81s";
+		reg = <0x68>;
+		status = "okay";
+	};
+
+  exp1: pca@20 {
+    compatible = "pca9534";
+    reg = <0x20>;
+    status = "okay";
+  };
+  exp2: pca@21 {
+    compatible = "pca9534";
+    reg = <0x21>;
+    status = "okay";
+  };
+  exp3: pca@22 {
+    compatible = "pca9534";
+    reg = <0x22>;
+    status = "okay";
+  };
+};
+
+/* NAND memory */
+&am33xx_pinmux {
+		nandflash_pins: pinmux_nandflash {
+			pinctrl-single,pins = <
+			0x0 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad0.gpmc_ad0 */
+			0x4 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad1.gpmc_ad1 */
+			0x8 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad2.gpmc_ad2 */
+			0xc (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad3.gpmc_ad3 */
+			0x10 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad4.gpmc_ad4 */
+			0x14 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad5.gpmc_ad5 */
+			0x18 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad6.gpmc_ad6 */
+			0x1c (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad7.gpmc_ad7 */
+			0x70 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_wait0.gpmc_wait0 */
+			0x7c (PIN_OUTPUT | MUX_MODE0)		/* gpmc_csn0.gpmc_csn0 */
+			0x90 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_advn_ale.gpmc_advn_ale */
+			0x94 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_oen_ren.gpmc_oen_ren */
+			0x98 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_wen.gpmc_wen */
+			0x9c (PIN_OUTPUT | MUX_MODE0)		/* gpmc_be0n_cle.gpmc_be0n_cle */
+		>;
+	};
+};
+
+&elm {
+	status = "okay";
+};
+
+&gpmc {
+	status = "okay";
+	pinctrl-names = "default";
+	pinctrl-0 = <&nandflash_pins>;
+	ranges = <0 0 0x08000000 0x1000000>;   /* CS0: NAND */
+	nandflash: nand@0,0 {
+		compatible = "ti,omap2-nand";
+		reg = <0 0 4>; /* CS0, offset 0, IO size 4 */
+		interrupt-parent = <&gpmc>;
+		interrupts = <0 IRQ_TYPE_NONE>, /* fifoevent */
+			     <1 IRQ_TYPE_NONE>;	/* termcount */
+		rb-gpios = <&gpmc 0 GPIO_ACTIVE_HIGH>; /* gpmc_wait0 */
+		nand-bus-width = <8>;
+		ti,nand-ecc-opt = "bch8";
+		gpmc,device-nand = "true";
+		gpmc,device-width = <1>;
+		gpmc,sync-clk-ps = <0>;
+		gpmc,cs-on-ns = <0>;
+		gpmc,cs-rd-off-ns = <30>;
+		gpmc,cs-wr-off-ns = <30>;
+		gpmc,adv-on-ns = <0>;
+		gpmc,adv-rd-off-ns = <30>;
+		gpmc,adv-wr-off-ns = <30>;
+		gpmc,we-on-ns = <0>;
+		gpmc,we-off-ns = <20>;
+		gpmc,oe-on-ns = <10>;
+		gpmc,oe-off-ns = <30>;
+		gpmc,access-ns = <30>;
+		gpmc,rd-cycle-ns = <30>;
+		gpmc,wr-cycle-ns = <30>;
+		gpmc,bus-turnaround-ns = <0>;
+		gpmc,cycle2cycle-delay-ns = <50>;
+		gpmc,cycle2cycle-diffcsen;
+		gpmc,clk-activation-ns = <0>;
+		gpmc,wr-access-ns = <30>;
+		gpmc,wr-data-mux-bus-ns = <0>;
+
+		ti,elm-id = <&elm>;
+
+		#address-cells = <1>;
+		#size-cells = <1>;
+
+		partition@0 {
+			label = "xload";
+			reg = <0x0 0x20000>;
+		};
+		partition@1 {
+			label = "xload_backup1";
+			reg = <0x20000 0x20000>;
+		};
+		partition@2 {
+			label = "xload_backup2";
+			reg = <0x40000 0x20000>;
+		};
+		partition@3 {
+			label = "xload_backup3";
+			reg = <0x60000 0x20000>;
+		};
+		partition@4 {
+			label = "barebox";
+			reg = <0x80000 0x80000>;
+		};
+
+		partition@5 {
+			label = "bareboxenv";
+			reg = <0x100000 0x20000>;
+		};
+
+		partition@6 {
+			label = "kernel";
+			reg = <0x120000 0x800000>;
+		};
+		partition@7 {
+			label = "kernel_back";
+			reg = <0x920000 0x800000>;
+		};
+
+		partition@8 {
+			label = "root";
+			/*
+			 * setting size to 0x0 here, size will be extended to
+			 * end of nand flash while booting.
+			 */
+			reg = <0x1120000 0x0>;
+		};
+  };
+};
+
+/* Power */
+#include "tps65910.dtsi"
+
+&tps {
+	vcc1-supply = <&vcc5v>;
+	vcc2-supply = <&vcc5v>;
+	vcc3-supply = <&vcc5v>;
+	vcc4-supply = <&vcc5v>;
+	vcc5-supply = <&vcc5v>;
+	vcc6-supply = <&vcc5v>;
+	vcc7-supply = <&vcc5v>;
+	vccio-supply = <&vcc5v>;
+
+	regulators {
+		vrtc_reg: regulator@0 {
+			regulator-always-on;
+		};
+
+		vio_reg: regulator@1 {
+			regulator-always-on;
+		};
+
+		vdd1_reg: regulator@2 {
+			/* VDD_MPU voltage limits 0.95V - 1.325V with +/-4% tolerance */
+			regulator-name = "vdd_mpu";
+			regulator-min-microvolt = <912500>;
+			regulator-max-microvolt = <1378000>;
+			regulator-boot-on;
+			regulator-always-on;
+		};
+
+		vdd2_reg: regulator@3 {
+			/* VDD_CORE voltage limits 0.95V - 1.1V with +/-4% tolerance */
+			regulator-name = "vdd_core";
+			regulator-min-microvolt = <912500>;
+			regulator-max-microvolt = <1150000>;
+			regulator-boot-on;
+			regulator-always-on;
+		};
+
+		vdd3_reg: regulator@4 {
+			regulator-always-on;
+		};
+
+		vdig1_reg: regulator@5 {
+			regulator-name = "vdig1_1p8v";
+			regulator-min-microvolt = <1800000>;
+			regulator-max-microvolt = <1800000>;
+		};
+
+		vdig2_reg: regulator@6 {
+			regulator-always-on;
+		};
+
+		vpll_reg: regulator@7 {
+			regulator-always-on;
+		};
+
+		vdac_reg: regulator@8 {
+			regulator-always-on;
+		};
+
+		vaux1_reg: regulator@9 {
+			regulator-always-on;
+		};
+
+		vaux2_reg: regulator@10 {
+			regulator-always-on;
+		};
+
+		vaux33_reg: regulator@11 {
+			regulator-always-on;
+		};
+
+		vmmc_reg: regulator@12 {
+			regulator-min-microvolt = <3300000>;
+			regulator-max-microvolt = <3300000>;
+			regulator-always-on;
+		};
+	};
+};
+
+
+/* Ethernet */
+&am33xx_pinmux {
+	ethernet1_pins: pinmux_ethernet1 {
+		pinctrl-single,pins = <
+			0x40 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a0.rgmii2_tctl */
+			0x44 (PIN_INPUT_PULLDOWN | MUX_MODE2)   /* gpmc_a1.rgmii2_rctl */
+			0x48 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a2.rgmii2_td3 */
+			0x4c (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a3.rgmii2_td2 */
+			0x50 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a4.rgmii2_td1 */
+			0x54 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a5.rgmii2_td0 */
+			0x58 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a6.rgmii2_tclk */
+			0x5c (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a7.rgmii2_rclk */
+			0x60 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a8.rgmii2_rd3 */
+			0x64 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a9.rgmii2_rd2 */
+			0x68 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a10.rgmii2_rd1 */
+			0x6c (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* gpmc_a11.rgmii2_rd0 */
+		>;
+	};
+};
+
+
+
+/* MMC */
+&am33xx_pinmux {
+	mmc1_pins: pinmux_mmc1_pins {
+		pinctrl-single,pins = <
+			0x0F0 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat3.mmc0_dat3 */
+			0x0F4 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat2.mmc0_dat2 */
+			0x0F8 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat1.mmc0_dat1 */
+			0x0FC (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat0.mmc0_dat0 */
+			0x100 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_clk.mmc0_clk */
+			0x104 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_cmd.mmc0_cmd */
+      0xe0 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* lcd_vsync.gpio2[22] */
+		>;
+	};
+  mmc2_pins: pinmux_mmc2_pins {
+		pinctrl-single,pins = <
+      0x80 ( PIN_INPUT | MUX_MODE2 ) /* (U9) gpmc_csn1.mmc1_clk */
+      0x84 ( PIN_INPUT | MUX_MODE2 ) /* (V9) gpmc_csn2.mmc1_cmd */
+      0x20 ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (U10) gpmc_ad8.mmc1_dat0 */
+      0x24 ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (T10) gpmc_ad9.mmc1_dat1 */
+      0x28 ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (T11) gpmc_ad10.mmc1_dat2 */
+      0x2c ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (U12) gpmc_ad11.mmc1_dat3 */
+		>;
+	};
+
+};
+
+&mmc1 {
+	vmmc-supply = <&vcc3v3>;
+	bus-width = <4>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&mmc1_pins>;
+	cd-gpios = <&gpio2 22 GPIO_ACTIVE_HIGH>;
+	status = "okay";
+};
+
+&mmc2 {
+	vmmc-supply = <&vcc3v3>;
+	bus-width = <4>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&mmc2_pins>;
+	status = "okay";
+};
+
+/* UARTs */
+&am33xx_pinmux {
+	uart0_pins: pinmux_uart0 {
+		pinctrl-single,pins = <
+			0x170 (PIN_INPUT_PULLUP | MUX_MODE0)    /* uart0_rxd.uart0_rxd */
+			0x174 (PIN_OUTPUT_PULLDOWN | MUX_MODE0) /* uart0_txd.uart0_txd */
+		>;
+	};
+};
+
+&uart0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart0_pins>;
+	status = "okay";
+};
+
+/* USB */
+&am33xx_pinmux {
+	usb_pins: pinmux_usb_pins {
+		pinctrl-single,pins = <
+			0x21c (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* usb0_drvvbus.usb0_drvvbus */
+			0x234 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* usb1_drvvbus.usb1_drvvbus */
+		>;
+	};
+};
+
+&cppi41dma {
+	status = "okay";
+};
+
+&usb_ctrl_mod {
+	status = "okay";
+};
+
+&usb {
+	status = "okay";
+};
+
+&usb0 {
+	status = "okay";
+	dr_mode = "host";
+};
+
+&usb0_phy {
+	status = "okay";
+};
+
+&usb1 {
+	status = "okay";
+	dr_mode = "host";
+};
+
+&usb1_phy {
+	status = "okay";
+};
+
+&wkup_m3_ipc {
+	ti,scale-data-fw = "am335x-pcm060-scale-data.bin";
+};
+
+/* SPI Busses */
+&am33xx_pinmux {
+	spi1_pins: pinmux_spi1 {
+		pinctrl-single,pins = <
+      0x190 ( PIN_INPUT_PULLDOWN | MUX_MODE3 ) /* (A13) mcasp0_aclkx.spi1_sclk */
+      0x194 ( PIN_INPUT_PULLDOWN | MUX_MODE3 ) /* (B13) mcasp0_fsx.spi1_d0 */
+      0x198 ( PIN_INPUT_PULLUP | MUX_MODE3 ) /* (D12) mcasp0_axr0.spi1_d1 */
+      0x19C ( PIN_INPUT_PULLUP | MUX_MODE3 ) /* (D12) mcasp0_ahclkr.spi1_cs0 */
+      0x1b0 ( PIN_INPUT_PULLUP | MUX_MODE4 ) /* (A15) xdma_event_intr0.spi1_cs1 */
+		>;
+	};
+};
+
+&spi1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&spi1_pins>;
+	status = "okay";
+
+	spidev2: spi@0 {
+		compatible = "spidev";
+		reg = <0x0>;
+		spi-max-frequency = <48000000>;
+		status = "okay";
+	};
+  
+	spidev3: spi@1 {
+		compatible = "spidev";
+		reg = <0x1>;
+		spi-max-frequency = <48000000>;
+		status = "okay";
+	};
+};
diff --git a/arch/arm/boot/dts/am335x-s7.dts b/arch/arm/boot/dts/am335x-s7.dts
new file mode 100644
index 0000000..3465683
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-s7.dts
@@ -0,0 +1,113 @@
+/*
+ * Copyright (C) 2017 sitec systems GmbH
+ * Author: Robert Lehmann <robert.lehmann@sitec-systems.de>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/dts-v1/;
+
+#include "am335x-s7-base.dtsi"
+
+/ {
+  model = "S7 sitec systems";
+};
+
+/* CAN */
+&am33xx_pinmux {
+	dcan1_pins: pinmux_dcan1 {
+		pinctrl-single,pins = <
+			0x180 (PIN_OUTPUT_PULLUP | MUX_MODE2)	/* uart1_rxd.dcan1_tx_mux2 */
+			0x184 (PIN_INPUT_PULLUP | MUX_MODE2)	/* uart1_txd.dcan1_rx_mux2 */
+		>;
+	};
+  
+	dcan0_pins: pinmux_dcan0 {
+		pinctrl-single,pins = <
+      0x120 (PIN_INPUT_PULLUP | MUX_MODE1) /* (K15) gmii1_txd2.dcan0_rx */
+      0x11c (PIN_OUTPUT_PULLUP | MUX_MODE1) /* (J18) gmii1_txd3.dcan0_tx */
+		>;
+	};
+};
+  
+&dcan0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&dcan0_pins>;
+	status = "okay";
+};
+
+&dcan1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&dcan1_pins>;
+	status = "okay";
+};
+
+&tscadc {
+	status = "okay";
+  adc {
+    ti,adc-channels = <0 1 2 3 4 5 6 7>;
+  };
+};
+
+/* UARTs */
+&am33xx_pinmux {
+	uart2_pins: pinmux_uart2 {
+		pinctrl-single,pins = <
+			0x12C (PIN_INPUT_PULLUP | MUX_MODE1)	/* mii1_tx_clk.uart2_rxd */
+			0x130 (PIN_OUTPUT_PULLDOWN | MUX_MODE1)	/* mii1_rx_clk.uart2_txd */
+		>;
+	};
+
+	uart3_pins: pinmux_uart3 {
+		pinctrl-single,pins = <
+			0x134 (PIN_INPUT_PULLUP | MUX_MODE1)	/* mii1_rxd3.uart3_rxd */
+			0x138 (PIN_OUTPUT_PULLDOWN | MUX_MODE1)	/* mii1_rxd2.uart3_txd */
+		>;
+	};
+  
+	uart4_pins: pinmux_uart4 {
+		pinctrl-single,pins = <
+      0x168 ( PIN_INPUT_PULLUP | MUX_MODE1 ) /* (E18) uart0_ctsn.uart4_rxd */
+      0x16c ( PIN_OUTPUT_PULLDOWN | MUX_MODE1 ) /* (E17) uart0_rtsn.uart4_txd */
+		>;
+	};
+};
+
+&uart2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart2_pins>;
+	status = "okay";
+};
+
+&uart3 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart3_pins>;
+	status = "okay";
+};
+
+&uart4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart4_pins>;
+	status = "okay";
+};
+
+/* SPI Busses */
+&am33xx_pinmux {
+	spi0_pins: pinmux_spi0 {
+		pinctrl-single,pins = <
+			0x150 (PIN_INPUT_PULLDOWN | MUX_MODE0)	/* spi0_clk.spi0_clk */
+			0x154 (PIN_INPUT_PULLDOWN | MUX_MODE0)	/* spi0_d0.spi0_d0 */
+			0x158 (PIN_INPUT_PULLUP | MUX_MODE0)	/* spi0_d1.spi0_d1 */
+			0x15c (PIN_INPUT_PULLUP | MUX_MODE0)	/* spi0_cs0.spi0_cs0 */
+      0x160 (PIN_INPUT_PULLUP | MUX_MODE0 ) /* (C15) spi0_cs1.spi0_cs1 */
+		>;
+	};
+};
+
+&spi0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&spi0_pins>;
+	status = "okay";
+};
diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 4bf7d50..58771c5 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -14,8 +14,7 @@ config AD525X_DPOT
 	tristate "Analog Devices Digital Potentiometers"
 	depends on (I2C || SPI) && SYSFS
 	help
-	  If you say yes here, you get support for the Analog Devices
-	  AD5258, AD5259, AD5251, AD5252, AD5253, AD5254, AD5255
+	  If you say yes here, you get support for the Analog Devices AD5258, AD5259, AD5251, AD5252, AD5253, AD5254, AD5255
 	  AD5160, AD5161, AD5162, AD5165, AD5200, AD5201, AD5203,
 	  AD5204, AD5206, AD5207, AD5231, AD5232, AD5233, AD5235,
 	  AD5260, AD5262, AD5263, AD5290, AD5291, AD5292, AD5293,
@@ -516,6 +515,12 @@ config SRAM
 	  the genalloc API. It is supposed to be used for small on-chip SRAM
 	  areas found on many SoCs.
 
+config GPIOEXPORT
+  bool "Export GPIO to userspace at bootup"
+  depends on GPIOLIB
+  help
+    This option enables the export of gpio at boottime
+
 config VEXPRESS_SYSCFG
 	bool "Versatile Express System Configuration driver"
 	depends on VEXPRESS_CONFIG
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 537d7f3..c765a3c 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -35,6 +35,7 @@ obj-$(CONFIG_ISL29020)		+= isl29020.o
 obj-$(CONFIG_SENSORS_TSL2550)	+= tsl2550.o
 obj-$(CONFIG_DS1682)		+= ds1682.o
 obj-$(CONFIG_TI_DAC7512)	+= ti_dac7512.o
+obj-$(CONFIG_GPIOEXPORT)	+= gpio-export.o
 obj-$(CONFIG_C2PORT)		+= c2port/
 obj-$(CONFIG_HMC6352)		+= hmc6352.o
 obj-y				+= eeprom/
diff --git a/drivers/misc/gpio-export.c b/drivers/misc/gpio-export.c
new file mode 100644
index 0000000..65023f3
--- /dev/null
+++ b/drivers/misc/gpio-export.c
@@ -0,0 +1,118 @@
+/*
+ * Export GPIOs to userspace at bootup
+ *
+ * Copyright (C) 2017 sitec systems GmbH
+ * Author: Robert Lehmann <robert.lehmann@sitec-systems.de>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#define DEBUG
+
+#include <linux/gpio.h>
+#include <linux/gpio/consumer.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/of_gpio.h>
+#include <linux/slab.h>
+#include <linux/string.h>
+
+struct gpio_exp_data {
+  int gpio;
+  struct device *dev;
+};
+
+static int gpio_exp_probe(struct platform_device *pdev)
+{
+  int ret;
+  struct device *dev = &pdev->dev;
+  struct device_node *np = dev->of_node;
+  struct gpio_exp_data *p;
+  const char* name;
+  int gpiomode = GPIOF_IN;
+
+  if (!np) {
+    return -EINVAL;
+  }
+
+  p = devm_kzalloc(dev, sizeof(struct gpio_exp_data), GFP_KERNEL);
+  if (!p) {
+    return -ENOMEM;
+  }
+
+  p->gpio = of_get_named_gpio(np, "en-gpio", 0);
+  if (p->gpio <= 0) {
+    dev_err(dev, "Can't get GPIO from DT");
+    ret = -EINVAL;
+    goto err;
+  }
+
+  ret = of_property_read_string(np, "en-name", &name);
+  if (ret != 0) {
+    dev_err(dev, "Can't read export name for GPIO");
+    ret = -EINVAL;
+    goto err;
+  }
+
+  if (of_property_read_bool(np, "en-output-low")) {
+    gpiomode = GPIOF_OUT_INIT_LOW;
+  } else if (of_property_read_bool(np, "en-output-high")) {
+    gpiomode = GPIOF_OUT_INIT_HIGH;
+  }
+
+  if (!gpio_is_valid(p->gpio)) {
+    dev_err(dev, "GPIO %d is not valid", p->gpio);
+    ret = -EINVAL;
+    goto err;
+  }
+
+  ret = gpio_request_one(p->gpio, gpiomode, name);
+  if (ret != 0) {
+    dev_err(dev, "Can't request GPIO %d", p->gpio);
+    ret = -EIO;
+    goto err;
+  }
+
+  if (of_property_read_bool(np, "en-do-export")) {
+    ret = gpio_export(p->gpio, false);
+    if (ret != 0) {
+      dev_err(dev, "Can't export GPIO %d to userspace", p->gpio);
+      ret = -EIO;
+      goto err;
+    }
+  }
+
+  dev_info(dev, "Successfully exported GPIO %d for %s", p->gpio, name);
+
+  return 0;
+
+err:
+  devm_kfree(dev, p);
+  return ret;
+}
+
+static struct of_device_id gpio_exp_of_match[] = {
+    { .compatible = "gpio-export", },
+    { },
+};
+
+MODULE_DEVICE_TABLE(of, gpio_exp_of_match);
+
+static struct platform_driver gpio_exp_driver = {
+    .probe = gpio_exp_probe,
+    .driver = {
+        .name = "gpio-export",
+        .owner = THIS_MODULE,
+        .of_match_table = of_match_ptr(gpio_exp_of_match)
+    }
+};
+
+module_platform_driver(gpio_exp_driver);
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Robert Lehmann <robert.lehmann@sitec-systems.de>");
+MODULE_DESCRIPTION("Platform driver for exporting gpios at boot time");
+MODULE_ALIAS("platform:gpio_exp");
diff --git a/scripts/genmergeimage.bash b/scripts/genmergeimage.bash
index 0b89ed6..23554eb 100755
--- a/scripts/genmergeimage.bash
+++ b/scripts/genmergeimage.bash
@@ -10,4 +10,4 @@ zimage=$1
 dtb=$2
 
 cat $1 $2 > /tmp/zImage-dtb
-mkimage -A arm -O linux -T multi -C none -a 80008000 -e 80008000 -n Linux+DTB -d /tmp/zImage-dtb uImage-dtb
+mkimage -A arm -O linux -T kernel -C none -a 80008000 -e 80008000 -n Linux+DTB -d /tmp/zImage-dtb uImage-dtb
-- 
2.1.4

